name: Build yakyak binaries

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build-yakyak:
    env:
      NPM_DEBUG_LEVEL: silent
      DEBUG: electron-packager

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12'
    - run: npm install -g coffee-script
    - run: npm ci
    - name: env_variables
      id: env-variables
      run: echo "::set-output name=version::$(node -e "console.log(require('./package.json').version);")"
    - run: |
        # install wine 32-bit architecture
        sudo dpkg --add-architecture i386
        sudo apt-get -qq update
        sudo rm /var/lib/dpkg/lock
        sudo apt-get install -y -qq wine-stable zip xvfb fakeroot
        wine wineboot --init # WINEARCH=win32
    - run: npm run -loglevel ${NPM_DEBUG_LEVEL} deploy:linux-x64
    - run: npm run -loglevel ${NPM_DEBUG_LEVEL} deploy:linux-arm64
    - run: npm run -loglevel ${NPM_DEBUG_LEVEL} deploy:linux-ia32
    - run: npm run -loglevel ${NPM_DEBUG_LEVEL} deploy:darwin-x64
    - run: npm run -loglevel ${NPM_DEBUG_LEVEL} deploy:darwin-arm64
    - run: xvfb-run npm run -loglevel ${NPM_DEBUG_LEVEL} deploy:win32
    - name: build rpm, deb and pacman
      run: sudo gem install --no-document fpm && sudo apt-get install -y -qq rpm libarchive-tools
    - run: npm run -loglevel ${NPM_DEBUG_LEVEL} gulp deploy:linux-x64:rpm:nodep
    - run: npm run -loglevel ${NPM_DEBUG_LEVEL} gulp deploy:linux-x64:deb:nodep
    - run: npm run -loglevel ${NPM_DEBUG_LEVEL} gulp deploy:linux-x64:pacman:nodep
    - run: npm run -loglevel ${NPM_DEBUG_LEVEL} gulp deploy:linux-ia32:rpm:nodep
    - run: npm run -loglevel ${NPM_DEBUG_LEVEL} gulp deploy:linux-ia32:deb:nodep
    - run: npm run -loglevel ${NPM_DEBUG_LEVEL} gulp deploy:linux-ia32:pacman:nodep
    #
    - run: ls && echo "123" && ls dist
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        prerelease: true
        files: |
          dist/yakyak-${{ steps.env-variables.outputs.version }}-linux-amd64.deb
          dist/yakyak-${{ steps.env-variables.outputs.version }}-linux-arm64.tar.gz
          dist/yakyak-${{ steps.env-variables.outputs.version }}-linux-i386.deb
          dist/yakyak-${{ steps.env-variables.outputs.version }}-linux-ia32-pacman.tar.gz
          dist/yakyak-${{ steps.env-variables.outputs.version }}-linux-ia32.rpm
          dist/yakyak-${{ steps.env-variables.outputs.version }}-linux-ia32.tar.gz
          dist/yakyak-${{ steps.env-variables.outputs.version }}-linux-x64-pacman.tar.gz
          dist/yakyak-${{ steps.env-variables.outputs.version }}-linux-x64.rpm
          dist/yakyak-${{ steps.env-variables.outputs.version }}-linux-x64.tar.gz
          dist/yakyak-${{ steps.env-variables.outputs.version }}-osx-arm64.zip
          dist/yakyak-${{ steps.env-variables.outputs.version }}-osx-x64.zip
          dist/yakyak-${{ steps.env-variables.outputs.version }}-win32-arm64.zip
          dist/yakyak-${{ steps.env-variables.outputs.version }}-win32-ia32.zip
          dist/yakyak-${{ steps.env-variables.outputs.version }}-win32-x64.zip
      #
      #    - "dist/com.github.yakyak.YakYak_master_x64.flatpak"
      # #    - "dist/com.github.yakyak.YakYak_master_ia32.flatpak"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    #   with:
    #     tag_name: rolling-test3 #${{ github.ref }}
    #     release_name: Release ${{ github.ref }}
    #     body: |
    #       Changes in this Release
    #       - First Change
    #       - Second Change
    #     draft: false
    #     prerelease: true
    # #
    # - name: Upload Release Asset
    #   id: upload-release-asset
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
    #     asset_path: ./dist/yakyak-${{ steps.env-variables.outputs.version }}-win32-x64.zip
    #     asset_name: yakyak-${{ steps.env-variables.outputs.version }}-win32-x64.zip
    #     asset_content_type: application/zip
